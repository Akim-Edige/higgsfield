# app/api/higgsfield/generate.py
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ Option
"""
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional, Literal
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import uuid

from app.infra.db import get_db
from app.domain.models import Option, Message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
from .text2image import generate_image, GenerateRequest as T2IRequest, Params as T2IParams
from .text2video import generate_video, GenerateVideoRequest, VideoParams
from .image2video import generate_image2video, Image2VideoRequest, Image2VideoParams, ImageReference, MotionRef

router = APIRouter(prefix="/higgsfield", tags=["higgsfield:generate"])


# ============================
# üìã –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞
# ============================
class GenerateRequest(BaseModel):
    option_id: str  # UUID –æ–ø—Ü–∏–∏ —Å enhanced_prompt –∏ style_id
    image_url: Optional[str] = None  # –î–ª—è image2video —Ä–µ–∂–∏–º–∞
    mode: Literal["text-to-image", "image-to-video", "text-to-video"]
    model_name: Optional[str] = "nano-banana"  # –î–ª—è text2image
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    aspect_ratio: Optional[str] = "16:9"
    duration: Optional[int] = 5  # –î–ª—è video
    resolution: Optional[str] = "720"  # –î–ª—è text2video
    quality: Optional[str] = "1080p"  # –î–ª—è text2image
    style_strength: Optional[float] = 1.0  # –î–ª—è text2image
    enhance_prompt: Optional[bool] = False  # Prompt —É–∂–µ enhanced
    seed: Optional[int] = None
    motion_strength: Optional[float] = 0.5  # –î–ª—è image2video


# ============================
# üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
# ============================
@router.post("/generate")
async def generate(
    request: GenerateRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
    1. –ü–æ–ª—É—á–∞–µ—Ç option_id –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç enhanced_prompt –∏ style_id
    2. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç mode –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Higgsfield —ç–Ω–¥–ø–æ–∏–Ω—Ç
    3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç job_id –∏ URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    
    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º Option –∏–∑ –ë–î
    try:
        option_uuid = uuid.UUID(request.option_id)
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid option_id format")
    
    result = await db.execute(
        select(Option).where(Option.id == option_uuid)
    )
    option = result.scalar_one_or_none()
    
    if not option:
        raise HTTPException(status_code=404, detail=f"Option {request.option_id} not found")
    
    if option.result_url:
        return {
            "url": option.result_url
        }
    
    enhanced_prompt = option.enhanced_prompt
    style_id = option.style_id
    
    # 2Ô∏è‚É£ –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç mode
    result = None
    
    if request.mode == "text-to-image":
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è text2image
        t2i_request = T2IRequest(
            params=T2IParams(
                prompt=enhanced_prompt,
                aspect_ratio=request.aspect_ratio,
                style_id=style_id,
                quality=request.quality,
                style_strength=request.style_strength,
                enhance_prompt=request.enhance_prompt,
                seed=request.seed,
                batch_size=1,
                input_images=[],
                model_name=request.model_name  # –ü–µ—Ä–µ–¥–∞—ë–º model_name
            )
        )
        result = await generate_image(t2i_request)
    
    elif request.mode == "image-to-video":
        if not request.image_url:
            raise HTTPException(
                status_code=400, 
                detail="image_url is required for image-to-video mode"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è image2video
        motions = None
        if style_id:  # style_id —ç—Ç–æ motion_id –¥–ª—è video
            motions = [MotionRef(id=style_id, strength=request.motion_strength)]
        
        i2v_request = Image2VideoRequest(
            params=Image2VideoParams(
                model="veo-3-fast",
                prompt=enhanced_prompt,
                input_image=ImageReference(
                    type="image_url",
                    image_url=request.image_url
                ),
                enhance_prompt=request.enhance_prompt,
                seed=request.seed,
                motions=motions,
                model_name=request.model_name or "veo3"  # –ü–µ—Ä–µ–¥–∞—ë–º model_name
            )
        )
        result = await generate_image2video(i2v_request)
    
    elif request.mode == "text-to-video":
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è text2video
        t2v_request = GenerateVideoRequest(
            params=VideoParams(
                prompt=enhanced_prompt,
                aspect_ratio=request.aspect_ratio,
                duration=request.duration,
                resolution=request.resolution,
                camera_fixed=False,
                model_name=request.model_name or "seedance-v1-lite-t2v"  # –ü–µ—Ä–µ–¥–∞—ë–º model_name
            )
        )
        result = await generate_video(t2v_request)
    
    else:
        raise HTTPException(status_code=400, detail=f"Unknown mode: {request.mode}")
    
    # 3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Option
    if result and "url" in result:
        option.result_url = result["url"]
        await db.commit()
        await db.refresh(option)
    
    return result
